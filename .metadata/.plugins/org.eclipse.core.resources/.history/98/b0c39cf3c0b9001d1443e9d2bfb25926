package com.MyAplication.service;

import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import com.MyAplication.error.ProductException;
import com.MyAplication.model.Product;

@Service
public class ProductExtService implements ExternalApiClient {

	 private static final Logger L = LoggerFactory.getLogger(ProductException.class);
	    RestTemplate restTemplate = new RestTemplate();
	    @Value("/product/{productId}")
	    private String externalApiBaseUrl;

	    @Autowired
	    public ProductExtService(RestTemplate restTemplate) {
	        this.restTemplate = restTemplate;
	    }

	    @Override
	    public Product getProductDetail(String productId) {
	        try {
	            String productDetailUrl = externalApiBaseUrl + "/product/{productId}".replace("{productId}", productId);
	            return restTemplate.getForObject(productDetailUrl, Product.class);
	        } catch (RestClientException e) {
	            L.error("Error while retrieving product detail", e);
	            throw new ProductException("Error while retrieving product detail", HttpStatus.NOT_FOUND);
	        }
	    }

	    @Override
	    public List<String> getSimilarProductIds(String productId) {
	        try {
	            String similarProductIdsUrl = externalApiBaseUrl + "/product/{productId}/similarids".replace("{productId}", productId);
	            return Arrays.asList(Objects.requireNonNull(restTemplate.getForObject(similarProductIdsUrl, String[].class)));
	        } catch (RestClientException e) {
	            L.error("Error while retrieving similar product ids", e);
	            throw new ProductException("Error while retrieving similar product ids", HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
}
