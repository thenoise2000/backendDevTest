package com.MyAplication.controller;

import java.util.List;

import com.MyAplication.error.ProductException;
import com.MyAplication.model.Product;
import com.MyAplication.service.ProductService;
import com.MyAplication.service.ProductServiceInterface;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@AllArgsConstructor
public class ProductController {

	@Autowired
    ProductServiceInterface productServiceInterface;

    @ExceptionHandler(HttpClientErrorException.NotFound.class)
    @GetMapping("/product/{productId}/similar")
    public Object getSimilarProducts(@PathVariable String productId) {
        log.debug("Similar products Controller is calling with productId: {}", productId);
        List<Product> products = productServiceInterface.getSimilarProducts(productId);

        if(products == null) {
            log.error("Not similar products found with productId: {}", productId);
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body("Product not Found");
        }
        return ResponseEntity.ok(products);
    }
}
